// Decompiled with JetBrains decompiler
// Type: UnityEngine.Collision
// Assembly: UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A8FF7A2C-E4EE-4232-AB17-3FCABEC16496
// Assembly location: C:\Users\Blake\sandbox\unity\test-project\Library\UnityAssemblies\UnityEngine.dll

using System;
using System.Collections;
using System.Runtime.InteropServices;
using UnityEngine.Scripting;

namespace UnityEngine
{
  /// <summary>
  ///   <para>Describes a collision.</para>
  /// </summary>
  [RequiredByNativeCode]
  [StructLayout(LayoutKind.Sequential)]
  public class Collision
  {
    internal Vector3 m_Impulse;
    internal Vector3 m_RelativeVelocity;
    internal Rigidbody m_Rigidbody;
    internal Collider m_Collider;
    internal ContactPoint[] m_Contacts;

    /// <summary>
    ///   <para>The relative linear velocity of the two colliding objects (Read Only).</para>
    /// </summary>
    public Vector3 relativeVelocity
    {
      get
      {
        return this.m_RelativeVelocity;
      }
    }

    /// <summary>
    ///   <para>The Rigidbody we hit (Read Only). This is null if the object we hit is a collider with no rigidbody attached.</para>
    /// </summary>
    public Rigidbody rigidbody
    {
      get
      {
        return this.m_Rigidbody;
      }
    }

    /// <summary>
    ///   <para>The Collider we hit (Read Only).</para>
    /// </summary>
    public Collider collider
    {
      get
      {
        return this.m_Collider;
      }
    }

    /// <summary>
    ///   <para>The Transform of the object we hit (Read Only).</para>
    /// </summary>
    public Transform transform
    {
      get
      {
        if ((Object) this.rigidbody != (Object) null)
          return this.rigidbody.transform;
        return this.collider.transform;
      }
    }

    /// <summary>
    ///   <para>The GameObject whose collider we are colliding with. (Read Only).</para>
    /// </summary>
    public GameObject gameObject
    {
      get
      {
        if ((Object) this.m_Rigidbody != (Object) null)
          return this.m_Rigidbody.gameObject;
        return this.m_Collider.gameObject;
      }
    }

    /// <summary>
    ///   <para>The contact points generated by the physics engine.</para>
    /// </summary>
    public ContactPoint[] contacts
    {
      get
      {
        return this.m_Contacts;
      }
    }

    /// <summary>
    ///   <para>The total impulse applied to this contact pair to resolve the collision.</para>
    /// </summary>
    public Vector3 impulse
    {
      get
      {
        return this.m_Impulse;
      }
    }

    [Obsolete("Use Collision.relativeVelocity instead.", false)]
    public Vector3 impactForceSum
    {
      get
      {
        return this.relativeVelocity;
      }
    }

    [Obsolete("Will always return zero.", false)]
    public Vector3 frictionForceSum
    {
      get
      {
        return Vector3.zero;
      }
    }

    [Obsolete("Please use Collision.rigidbody, Collision.transform or Collision.collider instead", false)]
    public Component other
    {
      get
      {
        if ((Object) this.m_Rigidbody != (Object) null)
          return (Component) this.m_Rigidbody;
        return (Component) this.m_Collider;
      }
    }

    public virtual IEnumerator GetEnumerator()
    {
      return this.contacts.GetEnumerator();
    }
  }
}
